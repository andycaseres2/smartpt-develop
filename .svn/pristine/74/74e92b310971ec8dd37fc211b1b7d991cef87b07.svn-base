import { useState } from "react";
import Button from "../Buttons/Button";
import NotificationItem from "../Notifications/NotificationItem";
import NotificationsTab from "../Tabs/NotificationsTab";
import { putData } from "../../services/putData";
import { userStore } from "../../store/userStore";
// import NotificationItemBudget from "../Notifications/NotificationItemBudget";
// import { useLocation } from "react-router-dom";

const ModalNotifications = ({
  styleContainer,
  notification,
  notificationHistory,
  employees,
  setRealTime,
}) => {
  const [activeTab, setActiveTab] = useState(1);
  const { token } = userStore();

  // const location = useLocation();
  // const currentPath = location.pathname;

  const tabs = [
    { id: 1, label: "Pendiente" },
    { id: 2, label: "Aceptado" },
  ];

  const getEmployeeFullNameById = (id) => {
    const employee = employees.find((employee) => employee.id === id);
    return employee.fullname;
  };

  function formatDateString(dateString) {
    const regex = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).*/;
    if (!regex.test(dateString)) {
      return;
    }

    const [, year, month, day, hours, minutes] = dateString.match(regex);
    const formattedDate = `${parseInt(month)}/${parseInt(day)}/${year}`;
    const formattedHours = (hours % 12 || 12).toString();
    const formattedMinutes = parseInt(minutes).toString().padStart(2, "0");
    const ampm = hours < 12 ? "am" : "pm";
    const formattedTime = `${formattedHours}:${formattedMinutes}${ampm}`;

    return `${formattedDate} - ${formattedTime}`;
  }
  const handleTabClick = (tab) => {
    setActiveTab(tab);
  };

  const handleClickInsideModal = (e) => {
    e.stopPropagation();
  };

  const handleAceptTask = async (notification) => {
    try {
      const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
      const acceptEndpoint = `${baseUrl}AsignedTask`;
      const body = notification;
      body.accepted = 1;

      // Formatear la fecha con milisegundos
      const currentDate = new Date();
      const milliseconds = String(currentDate.getMilliseconds()).padStart(
        3,
        "0"
      );
      body.dateaccepted = currentDate.toISOString().slice(0, -1) + milliseconds;

      await putData(acceptEndpoint, body, token);
    } catch (error) {
      console.error("Error al aceptar la tarea:", error);
    } finally {
      setRealTime(true);
    }
  };

  const handleAcceptAll = () => {
    notification.forEach((notification) => {
      handleAceptTask(notification);
    });
  };

  return (
    <div
      className={`${styleContainer} modal-notifications w-[380px] h-[450px] bg-white rounded-lg shadow-lg !z-50 overflow-hidden`}
      onClick={(e) => e.stopPropagation()}
    >
      <div className="flex justify-start p-3 border-b border-gray-300">
        <h1 className="text-2xl font-semibold text-black">Actividades</h1>
      </div>

      <NotificationsTab
        tabs={tabs}
        activeTab={activeTab}
        handleTabClick={handleTabClick}
        handleClickInsideModal={handleClickInsideModal}
      />

      {activeTab === 1 && (
        <div className="flex flex-col mt-1 p-3 w-full overflow-y-auto overflow-hidden h-[290px]">
          <div className="flex flex-col gap-2">
            {notification.map((notification) => (
              <NotificationItem
                key={notification.idtask}
                asignner={getEmployeeFullNameById(
                  notification.idemployeeassigner
                )}
                dateassigned={formatDateString(notification.dateassigned)}
                showInput={true}
                handleChange={() => handleAceptTask(notification)}
              />
            ))}
            {/* <NotificationItem showInput={true} />
            {currentPath === "/presupuesto" && (
              <NotificationItemBudget showInput={true} />
            )} */}
          </div>
        </div>
      )}
      {activeTab === 2 && (
        <div className="flex flex-col mt-1 p-3 w-full overflow-y-auto overflow-hidden h-[290px]">
          <div className="flex flex-col gap-2">
            {notificationHistory.map((notification) => (
              <NotificationItem
                key={notification.idtask}
                asignner={getEmployeeFullNameById(
                  notification.idemployeeassigner
                )}
                dateassigned={formatDateString(notification.dateassigned)}
                showInput={false}
              />
            ))}
          </div>
        </div>
      )}
      {activeTab === 1 && (
        <div className="w-full flex justify-center p-2">
          <Button action={handleAcceptAll} text={"Aceptar tareas"} />
        </div>
      )}
    </div>
  );
};

export default ModalNotifications;
