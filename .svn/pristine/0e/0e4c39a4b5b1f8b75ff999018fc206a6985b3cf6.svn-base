import { useEffect, useState } from "react";
import Header from "../../components/Header/Header";
import AdminPlanning from "./AdminPlanning";
import WorkerPlanning from "./WorkerPlanning";
import { getData } from "../../services/getData";

const Planning = () => {
  const userRole = "admin";
  const [clients, setClients] = useState([]);
  const [activities, setActivities] = useState([]);
  const [processes, setProcesses] = useState([]);
  const [tasks, setTasks] = useState([]);
  const [isNewTask, setIsNewTask] = useState(false);
  const [realTime, setRealTime] = useState(true);
  const [totalTimes, setTotalTimes] = useState(0);

  useEffect(() => {
    // Verificar si tuArray tiene al menos un elemento antes de acceder
    if (tasks && tasks.length > 0) {
      // Iterar sobre cada objeto dentro de tuArray
      const estimatedTimes = tasks.map((objeto) => {
        // Buscar el objeto con key_name "EstimatedTime"
        const estimatedTimeObject = objeto.find(
          (propiedad) => propiedad.key_name === "EstimatedTime"
        );

        // Retornar el valor de "data" si se encontró el objeto
        return estimatedTimeObject ? estimatedTimeObject.data : null;
      });

      const total = estimatedTimes.reduce(
        (acumulador, valorActual) => acumulador + valorActual,
        0
      );
      // Actualizar el estado con los valores obtenidos
      setTotalTimes(total);
    }
  }, [tasks]); // La dependencia es tuArray

  useEffect(() => {
    // Leer la  URL base desde el archivo .env
    const baseUrl = "https://central.logotexo.com/smartpr/";

    // Definir los endpoints utilizando la URL base
    const clientsEndpoint = `${baseUrl}Customer`;
    const activitiesEndpoint = `${baseUrl}Activity`;
    const processesEndpoint = `${baseUrl}Process`;
    const tasksEndpoint = `${baseUrl}FormattedTask?page=1&size=10`;

    // Realizar solicitudes al montar el componente
    const fetchDataOnMount = async () => {
      try {
        const clientsData = await getData(clientsEndpoint);
        setClients(clientsData);
      } catch (error) {
        console.error("Error fetching clients data:", error);
      }

      try {
        const tasksData = await getData(tasksEndpoint);
        setTasks(tasksData);
      } catch (error) {
        console.error("Error fetching tasks data:", error);
      }

      try {
        const activitiesData = await getData(activitiesEndpoint);
        setActivities(activitiesData);
      } catch (error) {
        console.error("Error fetching activities data:", error);
      }

      try {
        const processesData = await getData(processesEndpoint);
        setProcesses(processesData);
      } catch (error) {
        console.error("Error fetching processes data:", error);
      }
    };

    fetchDataOnMount();
    setRealTime(false);
  }, [isNewTask, realTime]);

  return (
    <div className="flex flex-col w-full h-screen">
      <Header
        title="Planeación semanal"
        date="4/12/2023 - 8/12/2023"
        userName="Kenet Sebastián Segura Murillo"
        baseColor="bg-primary-red-600"
      />
      <div className="w-full flex flex-col bg-primary-pink-50 py-4 px-6 h-full">
        {userRole === "admin" ? (
          <AdminPlanning
            clients={clients}
            processes={processes}
            activities={activities}
            tasks={tasks}
            setTasks={setTasks}
            setRealTime={setRealTime}
            setIsNewTask={setIsNewTask}
            isNewTask={isNewTask}
            totalTimes={totalTimes}
          />
        ) : (
          <WorkerPlanning
            clients={clients}
            processes={processes}
            activities={activities}
            tasks={tasks}
            setTasks={setTasks}
            setIsNewTask={setIsNewTask}
            isNewTask={isNewTask}
            setRealTime={setRealTime}
            totalTimes={totalTimes}
          />
        )}
      </div>
    </div>
  );
};

export default Planning;
