import { useEffect, useState } from "react";
import Header from "../../components/Header/Header";
import AdminPlanning from "./AdminPlanning";
import WorkerPlanning from "./WorkerPlanning";
import { getData } from "../../services/getData";
import { stateStore } from "../../store/stateStore";

const Planning = () => {
  const userRole = import.meta.env.VITE_REACT_APP_ROLE;
  const { setProcesses, setClients, setActivities } = stateStore();
  const [tasks, setTasks] = useState([]);
  const [isNewTask, setIsNewTask] = useState(false);
  const [realTime, setRealTime] = useState(true);
  const [totalTimes, setTotalTimes] = useState(0);
  const [totalPages, setTotalPages] = useState(0);

  useEffect(() => {
    // Verificar si tasks tiene al menos un elemento antes de acceder
    if (tasks && tasks.length > 0) {
      // Filtrar elementos que tienen un valor v치lido para "EstimatedTime"
      const validTasks = tasks.filter((objeto) => {
        const estimatedTimeObject = objeto.find(
          (propiedad) => propiedad.key_name === "estimatedtime"
        );
        return estimatedTimeObject && estimatedTimeObject.data !== null;
      });

      // Obtener los valores de "EstimatedTime"
      const estimatedTimes = validTasks.map((objeto) => {
        const estimatedTimeObject = objeto.find(
          (propiedad) => propiedad.key_name === "estimatedtime"
        );
        return estimatedTimeObject ? estimatedTimeObject.data : null;
      });

      // Filtrar los valores nulos
      const validEstimatedTimes = estimatedTimes.filter(
        (valor) => valor !== null
      );

      // Sumar los valores v치lidos
      const total = validEstimatedTimes.reduce(
        (acumulador, valorActual) => acumulador + valorActual,
        0
      );

      // Actualizar el estado con los valores obtenidos
      setTotalTimes(Math.round(total / 60));
    }
  }, [tasks]);

  useEffect(() => {
    // Leer la  URL base desde el archivo .env
    const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;

    // Definir los endpoints utilizando la URL base
    const clientsEndpoint = `${baseUrl}Customer`;
    const activitiesEndpoint = `${baseUrl}Activity`;
    const processesEndpoint = `${baseUrl}Process`;
    const tasksEndpoint = `${baseUrl}FormattedTask?page=1&size=10`;
    const paginations = `${baseUrl}FormattedTask/Pages`;

    // Realizar solicitudes al montar el componente
    const fetchDataOnMount = async () => {
      try {
        const clientsData = await getData(clientsEndpoint);
        setClients(clientsData);
      } catch (error) {
        console.error("Error fetching clients data:", error);
      }

      try {
        const tasksData = await getData(tasksEndpoint);
        setTasks(tasksData);
      } catch (error) {
        console.error("Error fetching tasks data:", error);
      }

      try {
        const activitiesData = await getData(activitiesEndpoint);
        setActivities(activitiesData);
      } catch (error) {
        console.error("Error fetching activities data:", error);
      }

      try {
        const processesData = await getData(processesEndpoint);
        setProcesses(processesData);
      } catch (error) {
        console.error("Error fetching processes data:", error);
      }

      try {
        const paginationsData = await getData(paginations);
        const totalPages = Math.ceil(paginationsData / 10); // Redondear hacia arriba para asegurarse de que todas las tareas se muestren
        setTotalPages(totalPages);
      } catch (error) {
        console.error("Error fetching paginations data:", error);
      }
    };

    fetchDataOnMount();
    setRealTime(false);
  }, [isNewTask, realTime]);

  return (
    <div className="flex flex-col w-full h-screen">
      <Header
        title="Planeaci칩n semanal"
        date="4/12/2023 - 8/12/2023"
        userName="Kenet Sebastia패n Segura Murillo"
        baseColor="bg-primary-red-600"
      />
      <div className="w-full flex flex-col bg-primary-pink-50 py-4 px-6 h-full">
        {userRole === "ADMIN" ? (
          <AdminPlanning
            tasks={tasks}
            setTasks={setTasks}
            setRealTime={setRealTime}
            setIsNewTask={setIsNewTask}
            isNewTask={isNewTask}
            totalTimes={totalTimes}
            totalPages={totalPages}
          />
        ) : (
          <WorkerPlanning
            tasks={tasks}
            setTasks={setTasks}
            setIsNewTask={setIsNewTask}
            isNewTask={isNewTask}
            setRealTime={setRealTime}
            totalTimes={totalTimes}
            totalPages={totalPages}
          />
        )}
      </div>
    </div>
  );
};

export default Planning;
