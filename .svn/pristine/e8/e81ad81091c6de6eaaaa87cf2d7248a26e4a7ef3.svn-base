import { useState, useEffect } from "react";
import Tabs from "../../components/Tabs/Tabs";
import { stateStore } from "../../store/stateStore";
import SelectGeneric from "../../components/Selects/SelectGeneric";
import Pagination from "../../components/Paginations/Pagination";
import ButtonWithIcon from "../../components/Buttons/ButtonWithIcon";
import CloseIcon from "../../assets/Icons/CloseIcon";
import Select from "../../components/Selects/Select";
import ColumnTableRequest from "../../components/Tables/ColumnTableRequest";
import InputSecondary from "../../components/Inputs/InputSecondary";
import RowTableBudget from "../../components/Tables/RowTableBudget";
import ProfileCheck from "../../assets/Icons/ProfileCheck";
import CircleCheck from "../../assets/Icons/CircleCheck";
import ExportIcon from "../../assets/Icons/ExportIcon";
import Modal from "../../components/Modals/Modal";
import BudgetModalContent from "./BudgetModalContent";
import CirclePlus from "../../assets/Icons/CirclePlus";
import { postData } from "../../services/postData";
import { userStore } from "../../store/userStore";
import { getData } from "../../services/getData";
import CleanIcon from "../../assets/Icons/CleanIcon";
import { putData } from "../../services/putData";
import RowTable from "../../components/Tables/RowTable";
import ColumnTable from "../../components/Tables/ColumnTable";

const BudgetContent = ({
  budget,
  setBudget,
  totalPages,
  setTooltipSuccess,
  setTooltipError,
  setLoading,
  setRealTime,
  columnWidths,
  columnTitles,
  tax,
}) => {
  const [activeTab, setActiveTab] = useState(1);
  const [stateRow, setStateRow] = useState({});
  const [isOpenModal, setIsOpenModal] = useState(false);
  const [isOpenModalEdit, setIsOpenModalEdit] = useState(false);
  const {
    setOpenNotifications,
    clients,
    processes,
    activities,
    setCancelEdit,
  } = stateStore();
  const { user, token } = userStore();
  const [fieldReset, setFieldReset] = useState(false);
  const [updateActivities, setUpdateActivities] = useState([]);
  const [urlBase, setUrlBase] = useState(`
    ${
      import.meta.env.VITE_REACT_APP_URL_BASE
    }FormattedBudget?page=1&size=10&IdEmployee=${user.id}`);
  const [selectedRowId, setSelectedRowId] = useState(null);
  const [porcentajeFinancial, setPorcentajeFinancial] = useState(null);
  const [TRM, setTRM] = useState(null);
  const [showBottonsAproved, setShowBottonsAproved] = useState(false);

  const handleOpenModal = () => {
    setIsOpenModal(true);
  };
  const handleOpenModalEdit = () => {
    setIsOpenModalEdit(true);
  };

  const handleCloseModal = () => {
    setIsOpenModal(false);
  };
  const handleCloseModalEdit = () => {
    setIsOpenModalEdit(false);
  };
  const handleChange = (e) => {
    setStateRow((prevState) => {
      return {
        ...prevState,
        [e.target.name]: e.target.value,
      };
    });
  };
  const [initialOptionClient, setInitialOptionClient] = useState("Cliente");

  const handleTabClick = async (tab) => {
    setActiveTab(tab);
    setLoading(true);
    setCancelEdit(true);
    try {
      const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
      let tasksEndpoint = "";
      let initialOptions = {};

      if (tab === 3) {
        tasksEndpoint = `${baseUrl}FormattedBudget?consolidated=true&page=1&size=100&IdEmployee=${user.id}`;
        initialOptions = {
          client: "Clientes",
        };
        setCancelEdit(true);
      } else if (tab === 2) {
        tasksEndpoint = `${baseUrl}FormattedBudget?page=1&size=100&IdEmployee=${user.id}`;
        initialOptions = {
          client: "Clientes",
        };
        setCancelEdit(true);
      }

      setUrlBase(tasksEndpoint);
      const tasksData = await getData(tasksEndpoint, token);
      setBudget(tasksData);
      setInitialOptionClient(initialOptions.client);
    } catch (error) {
      console.error("Error al obtener datos de las tareas:", error);
    } finally {
      setLoading(false);
      setCancelEdit(true);
    }
  };
  const tabs = [
    { id: 1, label: "Registrar presupuesto " },
    { id: 2, label: "Solicitudes" },
    { id: 3, label: "Consolidado" },
  ];

  function groupRequestsByCustomer(requests) {
    const groupedByCustomer = {};

    // Iterar sobre el array de arrays 'requests'
    requests.forEach((item) => {
      // Obtener el nombre del cliente
      const customerName = item.find(
        (obj) => obj.key_name === "idcustomer"
      )?.data;
      if (customerName) {
        // Verificar si el cliente ya está en el objeto
        if (groupedByCustomer[customerName]) {
          // Agregar el elemento al array correspondiente al cliente
          groupedByCustomer[customerName].push(item);
        } else {
          // Crear una nueva entrada para el cliente y agregar el elemento
          groupedByCustomer[customerName] = [item];
        }
      }
    });

    // Crear un nuevo array con los elementos agrupados por cliente y sumar las horas estimadas
    const groupedRequests = Object.keys(groupedByCustomer).map(
      (customerName) => {
        const items = groupedByCustomer[customerName];
        return {
          customer: customerName,
          items: items,
        };
      }
    );

    return groupedRequests;
  }

  const groupedRequests = groupRequestsByCustomer(budget);

  useEffect(() => {
    setUpdateActivities(activities);
    setTRM(1);
    recalculateRows();
  }, [activities]);

  const handleSelectProcess = (id) => {
    const filterActivities = activities.filter(
      (activity) => activity.idprocess === id
    );
    setUpdateActivities(filterActivities);
  };

  const [rows, setRows] = useState([
    {
      id: 0,
      idbudget: 0,
      description: "",
      units: 0,
      price: 0,
      type: 0,
      idtax: 0,
    },
  ]);
  const [total, setTotal] = useState(0);
  const [totalUSD, setTotalUSD] = useState(0);
  const [subTotal, setSubTotal] = useState(0);

  useEffect(() => {
    const beforeTaxes = subTotal + (subTotal * porcentajeFinancial) / 100;
    const taxes =
      (tax.percentage * (subTotal + (subTotal * porcentajeFinancial) / 100)) /
      100;
    const total = beforeTaxes + taxes;
    setTotal(total);
    setTotalUSD((total / TRM).toFixed(2));
  }, [total, TRM, subTotal, tax, porcentajeFinancial]);

  const recalculateRows = () => {
    const updatedRows = [...rows.filter((n) => n)];
    let newTotal = 0;
    for (var i = 0; i < updatedRows.length; i++) {
      if (updatedRows[i] !== undefined) {
        updatedRows[i].totalUSD = updatedRows[i].total / TRM;
        newTotal += parseFloat(updatedRows[i].total);
      }
    }

    // Actualizar el estado de las filas
    setRows(updatedRows);
    // Actualizar el estado del total
    setTotal(newTotal);
    setSubTotal(newTotal);
  };
  const handleInputChange = (index, event) => {
    const { name, value } = event.target;
    const updatedRows = [...rows];

    if (name === "description") {
      // Permitir letras y números en el campo "description"
      updatedRows[index][name] = value;
    } else {
      // Solo permitir números en otros campos
      const numericValue = parseFloat(value);
      updatedRows[index][name] = isNaN(numericValue) ? "" : numericValue;
    }

    // Calcular el total para la fila actual multiplicando unidades por precio
    const units = parseFloat(updatedRows[index].units) || 0;
    const price = parseFloat(updatedRows[index].price) || 0;
    updatedRows[index].total = units * price;
    updatedRows[index].totalUSD = updatedRows[index].total / TRM;

    // Calcular el total en USD (asumiendo un tipo de cambio fijo)
    const exchangeRate = Number(TRM);
    updatedRows[index].totalUSD = Math.round(
      updatedRows[index].total / exchangeRate
    );

    // Actualizar el estado de las filas
    setRows(updatedRows);

    // Calcular el nuevo total sumando los totales de todas las filas
    let newTotal = 0;
    updatedRows.forEach((row) => {
      newTotal += parseFloat(row.total);
    });

    // Actualizar el estado del total
    setTotal(newTotal);
    setSubTotal(newTotal);
  };

  const addRow = () => {
    setRows([
      ...rows.filter((n) => n),
      {
        id: 0,
        idbudget: 0,
        description: "",
        units: 1,
        price: 0,
        type: 0,
        idtax: 0,
      },
    ]);
  };

  const handleCleanFilters = async () => {
    setFieldReset(true);
    setInitialOptionClient("Clientes");
    const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
    let tasksEndpoint = "";
    if (activeTab === 2) {
      tasksEndpoint = `${baseUrl}FormattedBudget?page=1&size=100&IdEmployee=${user.id}`;
    } else if (activeTab === 3) {
      tasksEndpoint = `${baseUrl}FormattedBudget?consolidated=true&page=1&size=10&IdEmployee=${user.id}`;
    }
    setUrlBase(tasksEndpoint);
    try {
      const tasksData = await getData(tasksEndpoint, token);
      setBudget(tasksData);
    } catch (error) {
      console.error("Error fetching clients data:", error);
    }
    setFieldReset(false);
  };

  const handleSubmit = async (idBudget) => {
    try {
      const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
      const budgetEndpoint = `${baseUrl}BudgetDetails`;

      for (const row of rows) {
        row.idbudget = idBudget;
        row.idtax = 1;

        // Eliminar la propiedad 'id' de 'row'
        delete row.id;

        const body = {
          ...row,
        };
        await postData(budgetEndpoint, body, token);
      }
    } catch (error) {
      console.error("Error al manejar la solicitud:", error);
    }
  };

  const handleFormSubmit = async (event) => {
    try {
      event.preventDefault();
      const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
      const budgetEndpoint = `${baseUrl}Budget`;
      const body = {
        ...stateRow,
        total: total || 0,
        financialexpense: Number(porcentajeFinancial) || 0,
        trm: Number(TRM) || 0,
      };
      const budget = await postData(budgetEndpoint, body, token);
      await handleSubmit(budget.id);
      setStateRow({});
      setTooltipSuccess("Registro creado con exito");
      setRows([
        {
          id: 0,
          idbudget: 0,
          description: "",
          units: 0,
          price: 0,
          type: 0,
          idtax: 0,
        },
      ]);
      setBodyRow({
        total: 0,
        financialexpense: 0,
        trm: 0,
      });
      setTRM(1);
      setPorcentajeFinancial(0);
      setTotal(0);
      setSubTotal(0);
    } catch (error) {
      console.error("Error al enviar el formulario:", error);
      setTooltipError("Hubo un error al crear el registro");
    } finally {
      setRealTime(true);
      setStateRow({});
      setFieldReset(true);
    }
  };

  const getDataValues = (arr) => {
    const result = [];
    arr?.forEach((innerArray) => {
      innerArray?.forEach((obj) => {
        if (obj?.key_name === "idcustomer") {
          result.push(obj.data);
        }
      });
    });
    return result;
  };

  const dataList = budget && getDataValues(budget);
  const uniqueMap = {};
  const newClients = [];
  dataList.forEach((value) => {
    const found = clients.find((client) => client.name === value);
    if (found && !uniqueMap[found.id]) {
      uniqueMap[found.id] = true; // Registrar el id como único
      newClients.push(found);
    }
  });

  const [bodyRow, setBodyRow] = useState({
    total: 0,
    approvedclient: 0,
    approvedplanning: 0,
  });

  const formatBody = (array) => {
    const updatedBody = { ...bodyRow };
    array.forEach((objeto) => {
      let clave = objeto.key_name !== null ? objeto.key_name : "id";
      if (objeto.options && Array.isArray(objeto.options)) {
        const option = objeto.options.find(
          (option) => option.value === objeto.data
        );
        if (option) {
          updatedBody[clave] = option.id;
        } else {
          updatedBody[clave] = objeto.data;
        }
      } else {
        updatedBody[clave] = objeto.data;
      }
    });
    setBodyRow(updatedBody);
  };

  const handleUpdateArchive = async () => {
    try {
      const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
      const budgetEndpoint = `${baseUrl}Budget/${selectedRowId}`;
      let body = bodyRow;
      delete body.id;
      body.approvedclient = 0;
      body.approvedplanning = 0;
      await putData(budgetEndpoint, body, token);
      setTooltipSuccess("Presupuesto archivado con exito");
    } catch (error) {
      console.error("Error al actualizar el presupuesto:", error);
      setTooltipError("Hubo un error al archivar el presupuesto");
    } finally {
      setRealTime(true);
    }
  };

  const handleUpdateBudgetAprobedClient = async (state) => {
    try {
      const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
      const budgetEndpoint = `${baseUrl}Budget/${selectedRowId}`;
      let body = bodyRow;
      delete body.id;
      body.approvedclient = state;
      await putData(budgetEndpoint, body, token);
      setTooltipSuccess("Presupuesto aprobado con exito");
    } catch (error) {
      console.error("Error al actualizar el presupuesto:", error);
      setTooltipError("Hubo un error al aprobar el presupuesto");
    } finally {
      setRealTime(true);
    }
  };

  const handleUpdateBudgetAprobedPlanning = async (state) => {
    try {
      const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
      const budgetEndpoint = `${baseUrl}Budget/${selectedRowId}`;
      let body = bodyRow;
      delete body.id;
      body.approvedplanning = state;
      await putData(budgetEndpoint, body, token);
      if (state === 1) {
        setTooltipSuccess("Presupuesto aprobado con exito");
      } else {
        setTooltipSuccess("Presupuesto desaprobado con exito");
      }
    } catch (error) {
      console.error("Error al actualizar el presupuesto:", error);
      if (state === 1) {
        setTooltipError("Hubo un error al aprobar el presupuesto");
      } else {
        setTooltipError("Hubo un error al desaprobar el presupuesto");
      }
    } finally {
      setRealTime(true);
    }
  };

  const [currentBudget, setCurrentBudget] = useState(null);
  const [currentBudgetTables, setCurrentBudgetTables] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
        const budgetEndpoint = `${baseUrl}Budget/${selectedRowId}`;
        const budgetDetailsEndpoint = `${baseUrl}BudgetDetails/ByBudgetId/${selectedRowId}`;

        const budgetResponse = await getData(budgetEndpoint, token);
        const budgetDetailsResponse = await getData(
          budgetDetailsEndpoint,
          token
        );
        setCurrentBudget(budgetResponse);
        setCurrentBudgetTables(budgetDetailsResponse);
      } catch (error) {
        console.error("Error al obtener el presupuesto:", error);
      }
    };

    if (selectedRowId) {
      fetchData();
    } else {
      // Limpiar el estado si selectedRowId es nulo
      setCurrentBudget(null);
      setCurrentBudgetTables(null);
    }
  }, [selectedRowId]);

  return (
    <div className="flex flex-col" onClick={() => setOpenNotifications(false)}>
      <div className="w-full flex justify-between z-[2]">
        <div className="flex items-end tab">
          <div className="flex items-end">
            <Tabs
              tabs={tabs}
              activeTab={activeTab}
              handleTabClick={handleTabClick}
            />
          </div>
        </div>
        {activeTab === 2 && (
          <div className="flex gap-3 items-center mb-2">
            <Select
              options={newClients}
              setTasks={setBudget}
              newFilter={"IdCustomer"}
              initialOption={initialOptionClient}
              setInitialOption={setInitialOptionClient}
              isFilter={true}
              urlBase={urlBase}
              setUrlBase={setUrlBase}
            />
            <ButtonWithIcon
              text={"Limpiar filtros"}
              icon={<CleanIcon />}
              action={handleCleanFilters}
            />
          </div>
        )}

        {activeTab === 3 && (
          <div className="flex gap-3 items-center mb-2">
            <Select
              options={newClients}
              setTasks={setBudget}
              newFilter={"IdCustomer"}
              initialOption={initialOptionClient}
              setInitialOption={setInitialOptionClient}
              isFilter={true}
              urlBase={urlBase}
              setUrlBase={setUrlBase}
            />

            <ButtonWithIcon
              text={"Limpiar filtros"}
              icon={<CleanIcon />}
              action={handleCleanFilters}
            />
          </div>
        )}
      </div>
      <div className="bg-white rounded-bl-md rounded-r-md h-full">
        {activeTab === 1 && (
          <div className="overflow-x-auto h-full">
            <div className="">
              <div className="w-full flex px-6 py-5">
                <div className="w-full flex gap-7">
                  <div className="flex flex-col gap-2">
                    <h2>Cliente</h2>
                    <SelectGeneric
                      options={clients}
                      initialOption={""}
                      key_name="idcustomer"
                      handleChange={handleChange}
                      styleSelect={"w-[157px]"}
                      fieldReset={fieldReset}
                    />
                  </div>
                  <div className="flex flex-col gap-2">
                    <h2>Nombre del servicio</h2>
                    <InputSecondary
                      type="text"
                      name="name"
                      placeholder="Nombre del servicio"
                      value={stateRow?.servicename}
                      key_name={"servicename"}
                      handleChange={handleChange}
                    />
                  </div>
                  <div className="flex flex-col gap-2">
                    <h2>Vigencia presupuesto días</h2>
                    <InputSecondary
                      type="text"
                      name="name"
                      placeholder="Nombre del servicio"
                      value={stateRow?.validto}
                      handleChange={handleChange}
                      key_name={"validto"}
                      onlyNumber={true}
                    />
                  </div>
                  <div className="flex flex-col gap-2">
                    <h2>Proceso</h2>
                    <SelectGeneric
                      options={processes}
                      initialOption={""}
                      key_name=""
                      handleSelect={handleSelectProcess}
                      styleSelect={"w-[157px]"}
                      fieldReset={fieldReset}
                    />
                  </div>
                  <div className="flex flex-col gap-2">
                    <h2>Actividad</h2>
                    <SelectGeneric
                      options={updateActivities || activities}
                      initialOption={""}
                      key_name="idactivity"
                      handleChange={handleChange}
                      styleSelect={"w-[157px]"}
                      fieldReset={fieldReset}
                    />
                  </div>
                </div>
              </div>
              <div className="w-full flex flex-col gap-4 px-6">
                <div className="flex flex-col gap-3 ">
                  <span>Descripción</span>
                  <textarea
                    name="descripcion_pieza"
                    id="descripcion_pieza"
                    cols="30"
                    rows="10"
                    className="w-full rounded-md p-2 shadow-3xl h-[120px] focus:outline-none"
                    onChange={(e) => {
                      handleChange({
                        target: {
                          name: "description",
                          value: e.target.value,
                        },
                      });
                      setFieldReset(false);
                    }}
                    value={fieldReset ? "" : stateRow["specifications"]}
                  ></textarea>
                </div>
              </div>
              <div className="w-full flex flex-col gap-4 px-6 mt-4">
                <div className="flex flex-col gap-3 ">
                  <span>Presupuesto</span>
                  <div className="w-full">
                    <div className="w-full h-full flex items-end justify-end pb-4 gap-4">
                      <div className="w-1/6">
                        <h2 className="text-center">TRM</h2>
                        <InputSecondary
                          type="text"
                          name="name"
                          placeholder="Nombre del servicio"
                          value={TRM}
                          key_name={"servicename"}
                          handleChange={(e) => {
                            setTRM(e.target.value);
                            recalculateRows();
                          }}
                          onlyNumber={true}
                        />
                      </div>
                      <ButtonWithIcon
                        text=" Agregar fila"
                        action={addRow}
                        icon={<CirclePlus />}
                      />
                    </div>
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead>
                        <tr className="w-full flex justify-center gap-8">
                          <th className="py-2 text-center w-2/5">
                            {" "}
                            {/* Esta celda ocupará el 40% del ancho */}
                            Descripción
                          </th>
                          <th className="py-2 text-center w-1/5">
                            {" "}
                            {/* Estas celdas ocuparán cada una el 20% del ancho */}
                            Cantidad
                          </th>
                          <th className="py-2 text-center w-1/5">
                            Coste unitario
                          </th>
                          <th className="py-2 text-center w-1/5">Total</th>
                          <th className="py-2 text-center w-1/5">Total USD</th>
                          <th className="py-2 text-center w-1/7"></th>
                        </tr>
                      </thead>
                      <tbody>
                        {rows.map((row, index) => (
                          <tr
                            key={index}
                            className="w-full flex justify-center gap-8"
                          >
                            <td className="py-2 w-2/5">
                              <input
                                className="w-full p-2 bg-white rounded shadow-3xl focus:outline-none"
                                type="text"
                                name="description"
                                value={row.description}
                                onChange={(e) => handleInputChange(index, e)}
                              />
                            </td>
                            <td className="py-2 w-1/5">
                              <input
                                className="w-full p-2 bg-white rounded shadow-3xl focus:outline-none"
                                type="text"
                                name="units" // Cambiado de "cantidad" a "units"
                                value={row.units}
                                onChange={(e) => handleInputChange(index, e)}
                              />
                            </td>
                            <td className="py-2 w-1/5">
                              <input
                                className="w-full p-2 bg-white rounded shadow-3xl focus:outline-none"
                                type="text"
                                name="price" // Cambiado de "costoUnitario" a "price"
                                value={row.price}
                                onChange={(e) => handleInputChange(index, e)}
                              />
                            </td>

                            <td className="py-2 w-1/5 text-center flex items-center justify-center">
                              {isNaN(row.total)
                                ? "$0.00"
                                : Intl.NumberFormat("es-CO", {
                                    style: "currency",
                                    currency: "COP",
                                  }).format(row.total)}
                            </td>
                            <td className="py-2 w-1/5 text-center flex items-center justify-center">
                              {isNaN(row.totalUSD)
                                ? "$0.00"
                                : Intl.NumberFormat("es-CO", {
                                    style: "currency",
                                    currency: "COP",
                                  }).format(row.totalUSD)}
                            </td>
                            <td className="py-2 w-1/8 text-center flex items-center justify-center">
                              <CloseIcon
                                action={() => {
                                  delete rows[index];
                                  recalculateRows();
                                }}
                                className={"cursor-pointer hover:scale-105"}
                              />
                            </td>
                          </tr>
                        ))}
                        {/* Subtotal Row */}
                        <tr className="w-full flex justify-center gap-8 bg-rose-100">
                          <td className="py-2 font-bold w-2/5">Subtotal</td>
                          <td className="py-2 w-1/5"></td>
                          <td className="py-2 w-1/5"></td>
                          <td className="py-2 w-1/5 text-center">
                            {isNaN(subTotal)
                              ? "$0.00"
                              : Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(subTotal)}
                          </td>
                          <td className="py-2 w-1/5 text-center">
                            {isNaN(subTotal)
                              ? "$0.00"
                              : Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(subTotal / TRM)}
                          </td>
                          <td className="py-2 w-1/8"></td>
                        </tr>
                        {/* Financial Expenses*/}
                        <tr className="w-full flex justify-center gap-8 ">
                          <td className="py-2 w-2/5 flex items-center">
                            Financial Expenses
                          </td>
                          <td className="py-2 w-1/5"></td>
                          <td className="py-2 w-1/5">
                            <input
                              className="w-full p-2 bg-white rounded shadow-3xl focus:outline-none"
                              type="text"
                              name=""
                              value={porcentajeFinancial}
                              placeholder="%"
                              onChange={(e) => {
                                const newValue = e.target.value.replace(
                                  /\D/g,
                                  ""
                                );
                                setPorcentajeFinancial(newValue);
                              }}
                            />
                          </td>
                          <td className="py-2 w-1/5 text-center flex items-center justify-center">
                            {porcentajeFinancial
                              ? Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(
                                  (subTotal * porcentajeFinancial) / 100
                                )
                              : "$0.00"}
                          </td>
                          <td className="py-2 w-1/5 text-center items-center flex justify-center">
                            {porcentajeFinancial
                              ? Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(
                                  (subTotal * porcentajeFinancial) / 100 / TRM
                                )
                              : "$0.00"}
                          </td>
                          <td className="py-2 w-1/8"></td>
                        </tr>
                        {/* BEFORE TAXES*/}
                        <tr className="w-full flex justify-center gap-8 font-bold">
                          <td className="py-2 font-bold w-2/5">BEFORE TAXES</td>
                          <td className="py-2 w-1/5"></td>
                          <td className="py-2 w-1/5"></td>
                          <td className="py-2 w-1/5 text-center">
                            {isNaN(subTotal)
                              ? "$0.00"
                              : Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(
                                  subTotal +
                                    (subTotal * porcentajeFinancial) / 100
                                )}
                          </td>
                          <td className="py-2 w-1/5 text-center">
                            {isNaN(subTotal)
                              ? "$0.00"
                              : Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(
                                  (subTotal +
                                    (subTotal * porcentajeFinancial) / 100) /
                                    TRM
                                )}
                          </td>
                          <td className="py-2 w-1/8"></td>
                        </tr>
                        {/* Local Taxes (IVA - 19%)*/}
                        <tr className="w-full flex justify-center gap-8 ">
                          <td className="py-2  w-2/5">
                            {"Local Taxes (IVA - 19%)"}
                          </td>
                          <td className="py-2 w-1/5"></td>
                          <td className="py-2 w-1/5"></td>
                          <td className="py-2 w-1/5 text-center">
                            {isNaN(subTotal)
                              ? "$0.00"
                              : Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(
                                  (tax.percentage *
                                    (subTotal +
                                      (subTotal * porcentajeFinancial) / 100)) /
                                    100
                                )}
                          </td>
                          <td className="py-2 w-1/5 text-center">
                            {isNaN(subTotal)
                              ? "$0.00"
                              : Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(
                                  (tax.percentage *
                                    (subTotal +
                                      (subTotal * porcentajeFinancial) / 100)) /
                                    100 /
                                    TRM
                                )}
                          </td>
                          <td className="py-2 w-1/8"></td>
                        </tr>
                        {/* Total*/}
                        <tr className="w-full flex justify-center gap-8 bg-primary-red-600 text-white font-bold">
                          <td className="py-2 font-bold w-2/5">Total</td>
                          <td className="py-2 w-1/5"></td>
                          <td className="py-2 w-1/5"></td>
                          <td className="py-2 w-1/5 text-center">
                            {isNaN(total)
                              ? "$0.00"
                              : Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(total)}
                          </td>
                          <td className="py-2 w-1/5 text-center">
                            {isNaN(totalUSD)
                              ? "$0.00"
                              : Intl.NumberFormat("es-CO", {
                                  style: "currency",
                                  currency: "COP",
                                }).format(totalUSD)}
                          </td>
                          <td className="py-2 w-1/8"></td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
              <div className="flex justify-between items-end pt-2 pb-8 px-6 w-full gap-14">
                <div className="w-[67%] ml-2">
                  <span className="text-sm text-gray-500">
                    Todas las ideas, conceptos, información, materiales y
                    estrategias contenidas en este documento (incluyendo todos
                    los derechos de autor y marcas) son y deben ser
                    confidenciales y su propiedad intelectual pertenece a Smart
                    PR SAS y no puede ser utilizada hasta que pueda estar
                    disponible a través de una relación contractual.
                  </span>
                </div>
                <ButtonWithIcon
                  text="Registrar presupuesto"
                  action={handleFormSubmit}
                  icon={<CirclePlus />}
                />
              </div>
            </div>
          </div>
        )}

        {activeTab === 2 && (
          <div className="overflow-x-auto overflow-y-auto h-[520px]">
            <div className="h-[580px] overflow-y-auto overflow-hidden min-w-max">
              <div className="min-w-max h-full">
                <div className="w-full p-3 ">
                  <table className="min-w-full">
                    <thead>
                      <ColumnTableRequest
                        columnTitlesActivity={columnTitles}
                        columnWidths={columnWidths}
                        readOnly={false}
                      />
                    </thead>
                    <tbody className="border-b border-gray-300">
                      {budget?.map((item, index) => (
                        <div
                          key={index}
                          className={`${
                            selectedRowId !== item[item?.length - 1] &&
                            "hover:bg-primary-blue-50"
                          }  ${
                            selectedRowId === item[item?.length - 1]
                              ? "bg-primary-blue-600"
                              : ""
                          }`}
                          onClick={() => {
                            setSelectedRowId(item[item?.length - 1]);
                            formatBody(item);
                          }}
                        >
                          <RowTableBudget
                            listItems={item}
                            columnWidths={columnWidths}
                            stateRow={stateRow}
                            handleChange={handleChange}
                            readOnly={false}
                            editStatus={false}
                            onOpenModal={selectedRowId && handleOpenModal}
                            onOpenModalEdit={
                              selectedRowId && handleOpenModalEdit
                            }
                          />
                        </div>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            <div className="bg-red-600">
              {showBottonsAproved && (
                <div className="fixed bottom-[110px] w-full flex justify-center py-4 margin-bottom-10">
                  <div className="flex bg-primary-red-500 justify-center items-center rounded px-2">
                    <ButtonWithIcon
                      icon={<CircleCheck />}
                      text="Aprobar por planeación "
                      action={() => handleUpdateBudgetAprobedPlanning(1)}
                      designButton={"!rounded-none"}
                    />
                    <span className="h-6 w-0.5 bg-white"></span>
                    <ButtonWithIcon
                      icon={<CircleCheck />}
                      text="Desaprobado por planeación "
                      action={() => handleUpdateBudgetAprobedPlanning(0)}
                      designButton={"!rounded-none"}
                    />
                    <span className="h-6 w-0.5 bg-white"></span>
                    <ButtonWithIcon
                      icon={<ProfileCheck />}
                      text="Aprobar por cliente"
                      action={() => handleUpdateBudgetAprobedClient(1)}
                      designButton={"!rounded-none"}
                    />
                    <span className="h-6 w-0.5 bg-white"></span>
                    <ButtonWithIcon
                      icon={<ProfileCheck />}
                      text="Desaprobado por cliente"
                      action={() => handleUpdateBudgetAprobedClient(0)}
                      designButton={"!rounded-none"}
                    />
                  </div>
                </div>
              )}

              <div className="fixed w-full flex gap-4 justify-center py-4">
                <ButtonWithIcon
                  icon={<ProfileCheck />}
                  text="Archivar"
                  action={handleUpdateArchive}
                  designButton="!w-52 flex justify-center items-center"
                />
                <ButtonWithIcon
                  icon={<CircleCheck />}
                  text="Aprobar"
                  action={() => setShowBottonsAproved(!showBottonsAproved)}
                  designButton="!w-52 flex justify-center items-center"
                />
                <ButtonWithIcon
                  icon={<ExportIcon />}
                  text="Exportar"
                  action={""}
                  designButton="!w-52 flex justify-center items-center"
                />
              </div>
            </div>
          </div>
        )}

        {activeTab === 3 && (
          <div className="w-full h-full flex flex-col gap-6 relative">
            {groupedRequests.map((item, index) => (
              <div key={index} className="w-full h-full flex flex-col">
                <div className="flex px-4 mt-6 bg-white justify-between">
                  <div className="flex gap-2 items-center">
                    <p className="text-xl text-primary-red-600 font-semibold">
                      {item.customer}
                    </p>
                  </div>
                </div>
                <div className="overflow-x-auto h-full">
                  <div className="min-w-max">
                    <div className="w-full p-3">
                      <div className="overflow-x-auto">
                        <table className="min-w-full">
                          <thead>
                            <ColumnTable
                              columnTitlesActivity={columnTitles}
                              columnWidths={columnWidths}
                              readOnly={false}
                            />
                          </thead>
                          <tbody className="border-b border-gray-300">
                            {budget?.map((item, index) => (
                              <div
                                key={index}
                                className={`${
                                  selectedRowId !== item[item?.length - 1] &&
                                  "hover:bg-primary-blue-50"
                                }  ${
                                  selectedRowId === item[item?.length - 1]
                                    ? "bg-primary-blue-600"
                                    : ""
                                }`}
                                onClick={() => {
                                  setSelectedRowId(item[item?.length - 1]);
                                  formatBody(item);
                                }}
                              >
                                <RowTableBudget
                                  listItems={item}
                                  columnWidths={columnWidths}
                                  stateRow={stateRow}
                                  handleChange={handleChange}
                                  readOnly={true}
                                  editStatus={true}
                                  onOpenModal={selectedRowId && handleOpenModal}
                                  onOpenModalEdit={
                                    selectedRowId && handleOpenModalEdit
                                  }
                                />
                              </div>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      {activeTab === 3 && (
        <div className="flex justify-end">
          <Pagination
            setRequests={setBudget}
            totalPages={totalPages}
            urlBase={urlBase}
            setUrlBase={setUrlBase}
            setLoading={setLoading}
          />
        </div>
      )}

      {isOpenModal && (
        <Modal onClose={handleCloseModal}>
          <BudgetModalContent
            currentBudget={currentBudget}
            currentBudgetTables={currentBudgetTables}
            setCurrentBudgetTables={setCurrentBudgetTables}
            tax={tax}
            readOnly={true}
            setTooltipError={setTooltipError}
            setTooltipSuccess={setTooltipSuccess}
            setRealTime={setRealTime}
            selectedRowId={selectedRowId}
          />
        </Modal>
      )}
      {isOpenModalEdit && (
        <Modal onClose={handleCloseModalEdit}>
          <BudgetModalContent
            currentBudget={currentBudget}
            currentBudgetTables={currentBudgetTables}
            setCurrentBudgetTables={setCurrentBudgetTables}
            tax={tax}
            readOnly={false}
            setTooltipError={setTooltipError}
            setTooltipSuccess={setTooltipSuccess}
            setRealTime={setRealTime}
            selectedRowId={selectedRowId}
          />
        </Modal>
      )}
    </div>
  );
};

export default BudgetContent;
