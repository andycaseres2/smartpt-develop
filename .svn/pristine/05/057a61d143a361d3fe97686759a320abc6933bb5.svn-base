import Chart from "react-google-charts";
import DotsIcon from "../../../assets/Icons/DotsIcon";
import ExportIcon from "../../../assets/Icons/ExportIcon";
import BoxHours from "../../../components/Boxes/BoxHours";
import ButtonWithIcon from "../../../components/Buttons/ButtonWithIcon";
import InputDate from "../../../components/Inputs/InputDate";
import { useEffect, useState } from "react";
import Popup from "../../../components/Popups/Popup";
import { getData } from "../../../services/getData";
import { userStore } from "../../../store/userStore";
import Select from "../../../components/Selects/Select";
import MonthLegend from "../../../components/MonthLegend";
import { stateStore } from "../../../store/stateStore";
import CleanIcon from "../../../assets/Icons/CleanIcon";

const CollaboratorsPlanning = ({ realTime, setRealTime }) => {
  const { employees } = stateStore();
  const [openPopup, setOpenPopup] = useState(false);
  const [openSubPopup, setOpenSubPopup] = useState(false);
  const [openPopup2, setOpenPopup2] = useState(false);
  const [openSubPopup2, setOpenSubPopup2] = useState(false);
  const [dataReportByClient, setDataReportByClient] = useState([]);
  const [dataReportByWorker, setDataReportByWorker] = useState([]);
  const [dataReportByClientMonth, setDataReportByClientMonth] = useState([]);
  const [dataReportByProcess, setDataReportByProcess] = useState([]);
  const [dataReportByActivity, setDataReportByActivity] = useState([]);

  const { token } = userStore();

  useEffect(() => {
    const transformToBarPlot = (originalData, key) => {
      const colors = [
        "#E93E37",
        "#DF4D62",
        "#FF7686",
        "#E47526",
        "#EA9717",
        "#81BA63",
        "#43E18C",
        "#80B5C5",
        "#b87333",
        "#0192D3",
        "#8B6BAE",
      ];

      var result = [
        [
          "Element",
          "Density",
          { role: "style" },
          {
            sourceColumn: 0,
            role: "annotation",
            type: "string",
            calc: "stringify",
          },
        ],
      ];
      for (
        var i = 0, currentColor = 0;
        i < originalData.length;
        i++, currentColor++
      ) {
        if (currentColor >= colors.length) {
          currentColor = 0;
        }
        result.push([
          originalData[i][key],
          originalData[i]["sum"],
          colors[currentColor],
          null,
        ]);
      }
      return result;
    };

    const transformToComboBarPlot = (originalData) => {
      const colors = [
        "#E93E37",
        "#E93E70",
        "#DF4D62",
        "#FF7686",
        "#E47526",
        "#EA9717",
        "#81BA63",
        "#43E18C",
        "#80B5C5",
        "#b87333",
        "#0192D3",
        "#8B6BAE",
      ];
      var result = [
        [
          "Element",
          "Density",
          { role: "style" },
          {
            sourceColumn: 0,
            role: "annotation",
            type: "string",
            calc: "stringify",
          },
        ],
      ];

      // Agrupar datos por cliente y mes
      var clientsData = {};
      originalData.forEach((item) => {
        const client = item.name;
        const month = new Date(item.to_char).toLocaleString("en-US", {
          month: "long",
        });
        if (!clientsData[client]) {
          clientsData[client] = {};
        }
        clientsData[client][month] = item.sum;
      });

      // Iterar sobre los clientes
      Object.keys(clientsData).forEach((client) => {
        const clientData = clientsData[client];
        Object.keys(clientData).forEach((month) => {
          const color = colors[Math.floor(Math.random() * colors.length)];
          result.push([client, clientData[month], color, null]);
        });
      });

      return result;
    };

    const transformToPieBarPlot = (originalData) => {
      const transformedArray = [["Task", "Hours per Day"]];

      originalData.forEach((item) => {
        transformedArray.push([item.state.toString(), item.count]);
      });

      return transformedArray;
    };

    const fetchDataOnMount = async () => {
      try {
        const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
        const dashboardEndpointReport1 = `${baseUrl}Dashboard?reporte=1&startDate=${"2024-03-01T00:00:00"}&endDate=${"2024-04-01T00:00:00"}`;
        const dashboardEndpointReport2 = `${baseUrl}Dashboard?reporte=2&startDate=${"2024-03-01T00:00:00"}&endDate=${"2024-04-01T00:00:00"}`;
        const dashboardEndpointReport3 = `${baseUrl}Dashboard?reporte=3&startDate=${"2024-03-01T00:00:00"}&endDate=${"2024-04-01T00:00:00"}`;
        const dashboardEndpointReport4 = `${baseUrl}Dashboard?reporte=4&startDate=${"2024-03-01T00:00:00"}&endDate=${"2024-04-01T00:00:00"}`;
        const dashboardEndpointReport5 = `${baseUrl}Dashboard?reporte=5&startDate=${"2024-03-01T00:00:00"}&endDate=${"2024-04-01T00:00:00"}`;
        const dashboardEndpointReport6 = `${baseUrl}Dashboard?reporte=6&startDate=${"2024-03-01T00:00:00"}&endDate=${"2024-04-01T00:00:00"}`;

        const dataReportByClient = await getData(
          dashboardEndpointReport1,
          token
        );
        setDataReportByClient(transformToBarPlot(dataReportByClient, "name"));

        const dataReportByWorker = await getData(
          dashboardEndpointReport2,
          token
        );
        setDataReportByWorker(
          transformToBarPlot(dataReportByWorker, "fullname")
        );

        const dataReportByClientMonth = await getData(
          dashboardEndpointReport3,
          token
        );
        setDataReportByClientMonth(
          transformToComboBarPlot(dataReportByClientMonth, "name")
        );

        const dataReportByProcess = await getData(
          dashboardEndpointReport4,
          token
        );
        setDataReportByProcess(transformToBarPlot(dataReportByProcess, "name"));

        const dataReportByActivity = await getData(
          dashboardEndpointReport5,
          token
        );
        setDataReportByActivity(
          transformToBarPlot(dataReportByActivity, "name")
        );
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchDataOnMount();
    setRealTime(false);
  }, [realTime]);

  const colors = [
    "#E93E37",
    "#E93E70",
    "#DF4D62",
    "#FF7686",
    "#E47526",
    "#EA9717",
    "#81BA63",
    "#43E18C",
    "#80B5C5",
    "#b87333",
    "#0192D3",
    "#8B6BAE",
  ];

  const months = [
    "Enero",
    "Febrero",
    "Marzo",
    "Abril",
    "Mayo",
    "Junio",
    "Julio",
    "Agosto",
    "Septiembre",
    "Octubre",
    "Noviembre",
    "Diciembre",
  ];
  const monthsWithId = months.map((month, index) => ({
    id: index + 1,
    name: month,
  }));

  const options = {
    bar: { groupWidth: "75%" },
    legend: { position: "none" },
    chartArea: { width: "60%", height: "85%" },
    height: 400,
    hAxis: {
      minValue: 0,
      ticks: [0, 1000, 2000, 3000], // Establece los ticks específicos
    },
  };

  const optionsPie = {
    bar: { groupWidth: "100%" },
    legend: { position: "none" },
    chartArea: { width: "60%", height: "85%" },
    height: 300,
    hAxis: {
      minValue: 0,
      ticks: [0, 1000, 2000, 3100], // Establece los ticks específicos
    },
    pieHole: 0.6,
    is3D: false,
  };

  const optionsComboBar = {
    seriesType: "bars",
  };
  return (
    <div className="w-full h-[690px] bg-white p-4 shadow-3xl rounded-lg relative overflow-hidden overflow-y-auto">
      <div className="flex justify-between">
        <h1 className="w-max text-primary-orange-500 text-[32px] font-bold">
          Estado planeación clientes
        </h1>
        <div className="flex gap-4">
          <Select
            options={employees}
            setTasks={""}
            newFilter={""}
            initialOption={"Colaborador"}
            setInitialOption={""}
            consolided={true}
            isFilter={true}
            urlBase={""}
            setUrlBase={""}
          />
          <InputDate
            text={"Fecha inicio"}
            urlBase={""}
            setUrlBase={""}
            setTasks={""}
            newFilter={"startDate"}
            fieldReset={""}
          />
          <InputDate
            text={"Fecha fin"}
            urlBase={""}
            setUrlBase={""}
            setTasks={""}
            newFilter={"endDate"}
            fieldReset={""}
          />
          <ButtonWithIcon
            text={"Limpiar filtros"}
            icon={<CleanIcon />}
            action={""}
          />
        </div>
      </div>

      <div className="w-full justify-center mt-4 relative">
        <div className="flex flex-col items-center">
          <span className="!text-xl font-bold text-primary-orange-500">
            Resumen
          </span>
          <span>Comparativa de horas</span>
          <div className="flex justify-center gap-8 py-4">
            <BoxHours
              title="Horas programadas"
              porcentaje="+11%"
              values="15.000"
              color={"primary-orange-500"}
            />
            <BoxHours
              title="Horas reales"
              porcentaje="+11%"
              values="14.900"
              color={"primary-orange-500"}
            />
            <BoxHours
              title="Porcentaje de planeación"
              porcentaje="+11%"
              values="1%"
              color={"primary-orange-500"}
              textColor={"text-primary-green-500"}
            />
            <ButtonWithIcon
              buttonColor={"bg-primary-orange-500 absolute left-0 top-0"}
              text="Exportar dashboard"
              iconRight={<ExportIcon />}
            />
          </div>
          <div className="flex w-full items-start gap-6">
            <div className="w-full shadow-3xl rounded-lg flex flex-col py-2 justify-center px-4 relative">
              <div className="flex pl-2 justify-between items-center">
                <div className="flex flex-col">
                  <span className="text-primary-orange-500 font-bold text-[16px]">
                    Porcentaje competitud
                  </span>
                </div>
                <div
                  className={"cursor-pointer hover:scale-105 px-4 py-2"}
                  onClick={() => setOpenPopup(!openPopup)}
                >
                  <DotsIcon />
                </div>
              </div>

              <div className="flex justify-start items-center">
                <Chart
                  chartType="PieChart"
                  width="100%"
                  height="100%"
                  data={dataReportByClient}
                  options={optionsPie}
                />
                <div className="w-1/2 flex flex-col items-center">
                  <div className="flex flex-col items-center">
                    <div className="w-full flex gap-2 justify-start items-center">
                      <span className="text-2xl text-[#0192D3] rounded-full">
                        •
                      </span>
                      <span className="text-[#0192D3]">Total de tareas</span>
                    </div>
                    <span>barra progreso</span>
                  </div>
                  <div className="flex flex-col items-center">
                    <div className="w-full flex gap-2 justify-start items-center">
                      <span className="text-2xl text-[#82BA63] rounded-full">
                        •
                      </span>
                      <span className="text-[#82BA63]">Total de tareas</span>
                    </div>
                    <span>barra progreso</span>
                  </div>
                </div>
              </div>

              {openPopup && (
                <Popup
                  openSubPopup={openSubPopup}
                  setOpenSubPopup={setOpenSubPopup}
                />
              )}
            </div>
            <div className="w-full shadow-3xl rounded-lg flex flex-col py-2 justify-center px-4 relative">
              <div className="flex pl-2 justify-between items-center">
                <div className="flex flex-col">
                  <span className="text-primary-orange-500 font-bold text-[16px]">
                    Estados actividades
                  </span>
                </div>
                <div
                  className={"cursor-pointer hover:scale-105 px-4 py-2"}
                  onClick={() => setOpenPopup2(!openPopup2)}
                >
                  <DotsIcon />
                </div>
              </div>
              <div className="flex justify-start items-center">
                <Chart
                  chartType="PieChart"
                  width="100%"
                  height="100%"
                  data={dataReportByWorker}
                  options={optionsPie}
                />
                <div className="w-1/3 flex flex-col items-center">
                  <div className="w-full flex gap-2 justify-start items-center">
                    <span className="text-2xl text-primary-green-500 rounded-full">
                      •
                    </span>
                    <span>Finalizado</span>
                  </div>
                  <div className="w-full flex gap-2 items-center">
                    <span className="text-2xl text-primary-yellow-500 rounded-full">
                      •
                    </span>
                    <span>En proceso</span>
                  </div>
                  <div className="w-full flex gap-2 items-center">
                    <span className="text-2xl text-primary-red-500 rounded-full">
                      •
                    </span>
                    <span>Pendiente</span>
                  </div>
                  <div className="w-full flex gap-2 items-center">
                    <span className="text-2xl text-primary-blue-500 rounded-full">
                      •
                    </span>
                    <span>No ejecutado</span>
                  </div>
                </div>
              </div>
              {openPopup2 && (
                <Popup
                  openSubPopup={openSubPopup2}
                  setOpenSubPopup={setOpenSubPopup2}
                />
              )}
            </div>
          </div>
          <div className="flex w-full items-start gap-6 mt-4">
            <div className="w-full shadow-3xl rounded-lg flex flex-col py-2 justify-center px-4 relative">
              <div className="flex pl-2 justify-between items-center">
                <div className="flex flex-col">
                  <span className="text-primary-orange-500 font-bold text-[16px]">
                    Semanas sobre programadas y sub programadas
                  </span>
                  <span className="text-primary-orange-500 text-[14px]">
                    Hora x semana
                  </span>
                </div>
                <div
                  className={"cursor-pointer hover:scale-105 px-4 py-2"}
                  onClick={() => setOpenPopup(!openPopup)}
                >
                  <DotsIcon />
                </div>
              </div>

              <h2>aqui va otro grafico</h2>
              <Chart
                chartType="BarChart"
                width="100%"
                height="100%"
                data={dataReportByProcess}
                options={options}
              />
              {openPopup && (
                <Popup
                  openSubPopup={openSubPopup}
                  setOpenSubPopup={setOpenSubPopup}
                />
              )}
            </div>
            <div className="w-full shadow-3xl rounded-lg flex flex-col py-2 justify-center px-4 relative">
              <div className="flex pl-2 justify-between items-center">
                <div className="flex flex-col">
                  <span className="text-primary-orange-500 font-bold text-[16px]">
                    Dedicación por cliente
                  </span>
                  <span className="text-primary-orange-500 text-[14px]">
                    Clientes x Horas reales
                  </span>
                </div>
                <div
                  className={"cursor-pointer hover:scale-105 px-4 py-2"}
                  onClick={() => setOpenPopup2(!openPopup2)}
                >
                  <DotsIcon />
                </div>
              </div>
              <Chart
                chartType="BarChart"
                width="100%"
                height="100%"
                data={dataReportByClient}
                options={options}
              />
              {openPopup2 && (
                <Popup
                  openSubPopup={openSubPopup2}
                  setOpenSubPopup={setOpenSubPopup2}
                />
              )}
            </div>
          </div>
          <div className="flex w-full items-start gap-6 mt-4">
            <div className="w-full shadow-3xl rounded-lg flex flex-col py-2 justify-center px-4 relative">
              <div className="flex pl-2 justify-between items-center">
                <div className="flex flex-col">
                  <span className="text-primary-orange-500 font-bold text-[16px]">
                    Dedicación por proceso
                  </span>
                  <span className="text-primary-orange-500 text-[14px]">
                    Proceso x Horas reales
                  </span>
                </div>
                <div
                  className={"cursor-pointer hover:scale-105 px-4 py-2"}
                  onClick={() => setOpenPopup(!openPopup)}
                >
                  <DotsIcon />
                </div>
              </div>
              <Chart
                chartType="BarChart"
                width="100%"
                height="100%"
                data={dataReportByProcess}
                options={options}
              />
              {openPopup && (
                <Popup
                  openSubPopup={openSubPopup}
                  setOpenSubPopup={setOpenSubPopup}
                />
              )}
            </div>
            <div className="w-full shadow-3xl rounded-lg flex flex-col py-2 justify-center px-4 relative">
              <div className="flex pl-2 justify-between items-center">
                <div className="flex flex-col">
                  <span className="text-primary-orange-500 font-bold text-[16px]">
                    Dedicación por actividad
                  </span>
                  <span className="text-primary-orange-500 text-[14px]">
                    Actividad x Horas reales
                  </span>
                </div>
                <div
                  className={"cursor-pointer hover:scale-105 px-4 py-2"}
                  onClick={() => setOpenPopup2(!openPopup2)}
                >
                  <DotsIcon />
                </div>
              </div>
              <Chart
                chartType="BarChart"
                width="100%"
                height="100%"
                data={dataReportByActivity}
                options={options}
              />
              {openPopup2 && (
                <Popup
                  openSubPopup={openSubPopup2}
                  setOpenSubPopup={setOpenSubPopup2}
                />
              )}
            </div>
          </div>
          <div className="w-full shadow-3xl rounded-lg flex flex-col py-2 justify-center px-4 relative mt-6">
            <div className="flex pl-2 justify-between items-center">
              <div className="flex flex-col">
                <span className="text-primary-red-600 font-bold text-[16px]">
                  Dedicación por cliente mensual
                </span>
                <span className="text-primary-red-600 text-[14px]">
                  Hora x Cliente
                </span>
                <div className="flex gap-4 mt-3">
                  <Select
                    options={monthsWithId}
                    setTasks={""}
                    newFilter={""}
                    initialOption={"Mes inicio"}
                    setInitialOption={""}
                    consolided={true}
                    isFilter={true}
                    urlBase={""}
                    setUrlBase={""}
                    styleSelect={"w-max px-2 !h-9"}
                  />
                  <Select
                    options={monthsWithId}
                    setTasks={""}
                    newFilter={""}
                    initialOption={"Mes fin"}
                    setInitialOption={""}
                    consolided={true}
                    isFilter={true}
                    urlBase={""}
                    setUrlBase={""}
                    styleSelect={"w-max px-2 !h-9"}
                  />
                </div>
              </div>
              <div className={""}>
                <MonthLegend months={months} colors={colors} />
              </div>
            </div>
            <Chart
              chartType="ComboChart"
              width="100%"
              height="400px"
              data={dataReportByClientMonth}
              options={optionsComboBar}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default CollaboratorsPlanning;
