import { useEffect, useState } from "react";
import CheckIcon from "../../assets/Icons/CheckIcon";
import CloseIcon from "../../assets/Icons/CloseIcon";
import PencilIcon from "../../assets/Icons/PencilIcon";
import ProfilePicture from "../../assets/Icons/ProfilePicture";
import DateInput from "../Inputs/DateInput";
import Input from "../Inputs/Input";
import TimeInput from "../Inputs/TimeInput";
import SelectGeneric from "../Selects/SelectGeneric";
import SelectStatus from "../Selects/SelectStatus";
import { postData } from "../../services/postData";
import { putData } from "../../services/putData";
import ModalConfirmation from "../Modals/ModalConfirmation";
import { stateStore } from "../../store/stateStore";
import OptionsEmployees from "../Selects/OptionsEmployees";
import DeleteIcon from "../../assets/Icons/DeleteIcon";
import { deleteData } from "../../services/deleteData";

const RowTable = ({
  listItems,
  columnWidths,
  stateRow,
  setStateRow,
  handleChange,
  readOnly,
  editMode,
  newTaskAdd,
  setNewTaskAdd,
  index,
  setRealTime,
  setTooltipSuccess,
  setTooltipError,
  cancelAddTask,
  activeTab,
}) => {
  const {
    clients,
    activities,
    employees,
    cancelEdit,
    setCancelEdit,
    setStatusModeEdit,
  } = stateStore();
  const [modeEdit, setModeEdit] = useState(editMode ?? false);
  const [initialOptionSelectStatus, setInitialOptionSelectStatus] =
    useState("");
  const [initialOptionSelectOption, setInitialOptionSelectOption] =
    useState("");
  const [rowId, setRowId] = useState(null);
  const [openModalCancel, setOpenModalCancel] = useState(false);
  const [isUpdateStatus, setIsUpdateStatus] = useState(false);
  const [showSelectEmployee, setShowSelectEmployee] = useState(false);
  const [openModal, setOpenModal] = useState(false);
  const [openModalDelete, setOpenModalDelete] = useState(false);

  useEffect(() => {
    setStatusModeEdit(modeEdit);
  }, [modeEdit]);

  useEffect(() => {
    if (cancelEdit) {
      setModeEdit(false);
      setNewTaskAdd && setNewTaskAdd(false);
      setCancelEdit(false);
    }
  }, [cancelEdit]);

  useEffect(() => {
    if (isUpdateStatus && !modeEdit) {
      const newStateRow = listItems.reduce((accumulator, currentItem) => {
        let value;
        if (currentItem.key_name === "idcustomer") {
          const customer = clients.find(
            (customer) => customer.name === currentItem.data
          );
          value = customer ? customer.id : ""; // Si se encuentra el cliente, se toma su id, de lo contrario se asigna una cadena vacía
        } else if (currentItem.key_name === "idactivity") {
          const activity = activities.find(
            (activity) => activity.name === currentItem.data
          );
          value = activity ? activity.id : ""; // Si se encuentra la actividad, se toma su id, de lo contrario se asigna una cadena vacía
        } else {
          value = currentItem.data; // Para otros casos, se mantiene el mismo valor data
        }
        accumulator[currentItem.key_name] = value;
        return accumulator;
      }, {});
      setStateRow(newStateRow);
      setIsUpdateStatus(false);
    }
  }, [isUpdateStatus]);

  const handleSelectStatus = (selectedOption, index) => {
    const newOptions = [...initialOptionSelectStatus];
    newOptions[index] = selectedOption;
    setInitialOptionSelectStatus(newOptions);
  };

  useEffect(() => {
    const lastIndex = listItems.length - 1;
    setRowId(listItems[lastIndex]);
  }, [listItems]);

  useEffect(() => {
    if (newTaskAdd && index === 0) {
      setModeEdit(true);
    }
    setStateRow({});
  }, [newTaskAdd]);

  async function createTask() {
    try {
      // Obtener el objeto stateRow
      let body = { ...stateRow };

      // Verificar si las propiedades requeridas existen en el objeto body
      if (
        body.idcustomer &&
        body.name &&
        body.startdate &&
        body.idactivity &&
        body.estimatedtime
      ) {
        // Eliminar la propiedad 'null' del objeto
        if ("null" in body) {
          delete body["null"];
        }

        // Agregar la propiedad 'IdEmployeeAsigned' con el valor 1 al objeto
        body.idemployeeasigned = import.meta.env.VITE_REACT_APP_EMPLOYEE_ID;

        // Definir la URL base
        const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;

        // Construir la URL del endpoint para las tareas
        const tasksEndpoint = `${baseUrl}Task`;

        // Enviar los datos modificados al servidor utilizando la función postData
        await postData(tasksEndpoint, body);

        // Restablecer los modos de edición y agregar nueva tarea
        setModeEdit(false);
        setNewTaskAdd && setNewTaskAdd(false);
        setRealTime(true);
        setStateRow({});
        setTooltipSuccess("Tarea creada con éxito");
      } else {
        setStateRow({});
        setTooltipError(
          "No se pueden crear la tarea. Faltan propiedades requeridas."
        );
      }
    } catch (error) {
      // Manejar el error aquí
      console.error("Error al crear la tarea:", error);

      // Puedes definir un estado de error y guardarlo en tu componente si es necesario
      setTooltipError("Hubo un error al crear la tarea");
    }
  }

  async function editTask() {
    try {
      // Obtener el objeto stateRow
      const body = stateRow;

      // Convertir la propiedad con clave 'null' a 'ID'
      if ("null" in body) {
        delete body["null"];
      } else if ("id" in body) {
        delete body["id"];
      }

      // Agregar la propiedad 'IdEmployeeAsigned' con el valor 1 al objeto
      body.idemployeeasigned = import.meta.env.VITE_REACT_APP_EMPLOYEE_ID;

      // Definir la URL base
      const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;

      // Construir la URL del endpoint para la tarea específica
      const taskEndpoint = `${baseUrl}Task/${rowId}`;

      if (body.state === 3 || body.state === 4) {
        body.realenddate = new Date().toISOString().split("T")[0] + "T00:00:00";
      }

      // Agregar la lógica para enviar la solicitud PUT solo si body.state es 3 o 4 y existe realtimespent
      if (
        (body.state === 3 || body.state === 4) &&
        body.realtimespent !== null
      ) {
        await putData(taskEndpoint, body);
        setRealTime(true);
        setTooltipSuccess("Tarea editada con éxito");
        // Restablecer los modos de edición y agregar nueva tarea
        setModeEdit(false);
        setNewTaskAdd && setNewTaskAdd(false);
        setRealTime(true);
        setTooltipSuccess("Tarea editada con exito");
        setStateRow({});
      } else if (body.state !== 3 && body.state !== 4) {
        await putData(taskEndpoint, body);
        setRealTime(true);
        setTooltipSuccess("Tarea editada con éxito");
        // Restablecer los modos de edición y agregar nueva tarea
        setModeEdit(false);
        setNewTaskAdd && setNewTaskAdd(false);
        setRealTime(true);
        setStateRow({});
      } else {
        setTooltipError("Hubo un error editando la tarea");
      }
    } catch (error) {
      // Manejar el error aquí
      console.error("Error al editar la tarea:", error);

      // Puedes definir un estado de error y guardarlo en tu componente si es necesario
      setTooltipError("Hubo un error editando la tarea");
    }
  }

  const handleSelectOption = (selectedOption, index) => {
    const newOptions = [...initialOptionSelectOption];
    newOptions[index] = selectedOption;
    setInitialOptionSelectOption(newOptions);
  };

  const handleCancel = () => {
    cancelAddTask();
    setModeEdit(false);
    setOpenModalCancel(false);
    setStateRow({});
  };

  const handleCancelEdit = () => {
    setModeEdit(false);
    setOpenModalCancel(false);
    setStateRow({});
  };

  const handleAsignedEmployee = async (id) => {
    try {
      const asignedEndpoint = `${
        import.meta.env.VITE_REACT_APP_URL_BASE
      }AsignedTask`;

      const body = {
        idemployeeassigner: 1,
        idemployeeassigned: id,
        idtask: rowId,
        dateassigned: new Date().toISOString(),
        accepted: null,
        dateaccepted: null,
      };
      await postData(asignedEndpoint, body);
      setTooltipSuccess("Empleado asignado con exito");
    } catch (error) {
      setTooltipError("Error al asignar el empleado");
      console.error("Error al asignar el empleado:", error);
    } finally {
      setShowSelectEmployee(false);
    }
  };

  const toogleEmployee = (event) => {
    setShowSelectEmployee(!showSelectEmployee);
    event.stopPropagation();
  };

  const handleDeleteTask = async () => {
    try {
      const baseUrl = import.meta.env.VITE_REACT_APP_URL_BASE;
      const tasksEndpoint = `${baseUrl}Task/${rowId}`;
      await deleteData(tasksEndpoint);
      setRealTime(true);
      setTooltipSuccess("Tarea eliminada con exito");
      setRealTime(true);
      setStateRow({});
    } catch (error) {
      console.error("Error al eliminar la tarea:", error);
      setTooltipError("Hubo un error al eliminar la tarea");
    }
  };
  return (
    <tr className="justify-start flex w-full gap-6 py-1 px-2">
      {listItems?.map((item, index) => (
        <td
          key={index}
          className={`${columnWidths[index]} flex items-center justify-start`}
        >
          {item?.type === "status" && modeEdit ? (
            <SelectStatus
              options={item?.options}
              onSelect={(selectedOption) =>
                handleSelectStatus(selectedOption, index)
              }
              initialOption={item?.data}
              colorArrow={"white"}
              readOnly={readOnly}
              key_name={item?.key_name}
              handleChange={handleChange}
              editStatus={true}
              modeEdit={modeEdit}
              newTaskAdd={newTaskAdd}
              stateRow={stateRow}
              setRealTime={setRealTime}
              setTooltipError={setTooltipError}
              setTooltipSuccess={setTooltipSuccess}
              rowId={rowId}
              setIsUpdateStatus={setIsUpdateStatus}
            />
          ) : item?.type === "status" && !modeEdit ? (
            <SelectStatus
              options={item?.options}
              onSelect={(selectedOption) =>
                handleSelectStatus(selectedOption, index)
              }
              initialOption={item?.data}
              colorArrow={"white"}
              readOnly={readOnly}
              key_name={item?.key_name}
              handleChange={handleChange}
              editStatus={true}
              newTaskAdd={newTaskAdd}
              modeEdit={modeEdit}
              stateRow={stateRow}
              setRealTime={setRealTime}
              setTooltipError={setTooltipError}
              setTooltipSuccess={setTooltipSuccess}
              rowId={rowId}
              setIsUpdateStatus={setIsUpdateStatus}
            />
          ) : item?.editComponent === "input" &&
            item?.type === "text" &&
            modeEdit ? (
            <Input
              type={item?.type}
              value={stateRow[item?.key_name]}
              key_name={item?.key_name}
              handleChange={handleChange}
              initialValue={item?.data}
            />
          ) : item?.editComponent === "input" &&
            item?.type === "text" &&
            !modeEdit ? (
            <span>{item?.data}</span>
          ) : item?.editComponent === "input" &&
            item?.type === "link" &&
            modeEdit ? (
            <Input
              type={item?.type}
              value={stateRow[item?.key_name]}
              key_name={item?.key_name}
              handleChange={handleChange}
              initialValue={item?.data}
            />
          ) : item?.editComponent === "input" &&
            item?.type === "link" &&
            !modeEdit ? (
            <a
              className="text-blue-500 overflow-hidden whitespace-nowrap overflow-ellipsis"
              href={item?.data}
              target="__blank"
            >
              {item?.data}
            </a>
          ) : item?.editComponent === "select" && modeEdit ? (
            <SelectGeneric
              options={item?.options}
              onSelect={(selectedOption) =>
                handleSelectOption(selectedOption, index)
              }
              initialOption={item?.data}
              key_name={item?.key_name}
              handleChange={handleChange}
            />
          ) : item?.editComponent === "select" && !modeEdit ? (
            <span className="truncate">{item?.data}</span>
          ) : item?.editComponent === "input" &&
            item?.type === "time" &&
            (item?.key_name !== "realtimespent" ||
              (item?.key_name === "realtimespent" && !newTaskAdd)) &&
            modeEdit ? (
            <TimeInput
              handleChange={handleChange}
              defaultValue={item?.data}
              key_name={item?.key_name}
              type={item?.type}
            />
          ) : item?.editComponent === "input" &&
            item?.type === "time" &&
            !modeEdit ? (
            <>
              {item?.data > 0 ? (
                <span>
                  {`${Math.floor(item?.data / 60)}:${
                    item?.data % 60 < 10 ? "0" : ""
                  }${item?.data % 60} ${item?.data > 1 ? "horas" : "hora"}`}
                </span>
              ) : (
                ""
              )}
            </>
          ) : item?.editComponent === "input" &&
            item?.type === "date" &&
            modeEdit &&
            (item?.key_name !== "startdate" ||
              (item?.key_name === "startdate" && newTaskAdd)) &&
            item?.key_name !== "realenddate" ? (
            <DateInput
              handleChange={handleChange}
              defaultValue={item?.data}
              key_name={item?.key_name}
            />
          ) : (item?.editComponent === "input" &&
              item?.type === "date" &&
              item?.key_name !== "realenddate") ||
            (item?.key_name === "realenddate" && !modeEdit) ? (
            <span>{item?.data?.split("T")[0]}</span>
          ) : typeof item === "number" ||
            (item === null) & (listItems.length - 1) ? (
            !readOnly ? (
              !modeEdit ? (
                <td className="flex w-44 items-center gap-4 justify-center relative">
                  <PencilIcon
                    action={() => setModeEdit(true)}
                    className={"cursor-pointer hover:scale-105"}
                  />
                  {activeTab === 2 ? (
                    <DeleteIcon
                      className={"cursor-pointer hover:scale-105"}
                      action={() => setOpenModalDelete(true)}
                      style={{ pointerEvents: "none" }}
                    />
                  ) : (
                    <ProfilePicture
                      className={"cursor-pointer hover:scale-105"}
                      action={toogleEmployee}
                      style={{ pointerEvents: "none" }}
                    />
                  )}

                  {showSelectEmployee && (
                    <OptionsEmployees
                      employees={employees}
                      onSelect={handleAsignedEmployee}
                      setShowSelectEmployee={setShowSelectEmployee}
                    />
                  )}
                </td>
              ) : (
                <td className="flex w-44 items-center gap-4 justify-center">
                  <CheckIcon
                    className={"cursor-pointer hover:scale-105"}
                    action={() => {
                      newTaskAdd ? createTask() : setOpenModal(true);
                    }}
                  />
                  <CloseIcon
                    action={() => setOpenModalCancel(true)}
                    className={"cursor-pointer hover:scale-105"}
                  />
                </td>
              )
            ) : null
          ) : (
            <span className="truncate ">{item?.data}</span>
          )}
        </td>
      ))}

      {openModal && (
        <ModalConfirmation
          onClose={() => setOpenModal(false)}
          handleCancel={!newTaskAdd && editTask}
        />
      )}

      {openModalDelete && (
        <ModalConfirmation
          onClose={() => setOpenModalDelete(false)}
          handleCancel={handleDeleteTask}
        />
      )}

      {openModalCancel && (
        <ModalConfirmation
          onClose={() => setOpenModalCancel(false)}
          handleCancel={newTaskAdd ? handleCancel : handleCancelEdit}
        />
      )}
    </tr>
  );
};

export default RowTable;
