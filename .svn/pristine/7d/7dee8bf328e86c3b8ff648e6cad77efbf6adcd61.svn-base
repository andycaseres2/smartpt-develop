import { useState } from "react";
import ButtonWithIcon from "../../components/Buttons/ButtonWithIcon";
import Select from "../../components/Selects/Select";
import Tabs from "../../components/Tabs/Tabs";
import RowTable from "../../components/Tables/RowTable";
import ColumnTable from "../../components/Tables/ColumnTable";
import InputDate from "../../components/Inputs/InputDate";
import { stateStore } from "../../store/stateStore";
import Pagination from "../../components/Paginations/Pagination";
import CirclePlus from "../../assets/Icons/CirclePlus";
import { newTaskEmpty } from "../../utils/newTaskEmpty";

const WorkerPlanning = ({
  clients,
  activities,
  processes,
  tasks,
  setTasks,
  setRealTime,
  totalTimes,
  totalPages,
}) => {
  const [activeTab, setActiveTab] = useState(1);
  const [initialOptionSelect, setInitialOptionSelect] = useState("Cliente");
  const [initialOptionSelectActivity, setInitialOptionSelectActivity] =
    useState("Actividad");
  const [initialOptionSelectProcess, setInitialOptionSelectProcess] =
    useState("Proceso");
  const [stateRow, setStateRow] = useState({});
  const { setOpenNotifications } = stateStore();
  console.log(tasks);

  const handleTabClick = (tab) => {
    setActiveTab(tab);
  };

  const tabs = [
    { id: 1, label: "Actividades" },
    { id: 2, label: "Consolidado" },
  ];

  const handleSelect = (selectedOption) => {
    setInitialOptionSelect(selectedOption);
  };

  const handleSelectProcess = (selectedOption) => {
    setInitialOptionSelectProcess(selectedOption);
  };

  const handleSelectActivity = (selectedOption) => {
    setInitialOptionSelectActivity(selectedOption);
  };

  const handleChange = (e) => {
    setStateRow((prevState) => {
      return {
        ...prevState,
        [e.target.name]: e.target.value,
      };
    });
  };

  0;

  const columnWidths = [
    "w-44", // Ancho para Columna 1
    "w-[400px]", // Ancho para Columna 2
    "w-44", // Ancho para Columna 3
    "w-44", // Ancho para Columna 4
    "w-52", // Ancho para Columna 5
    "w-72", // Ancho para Columna 6
    "w-64", // Ancho para Columna 7
    "w-72", // Ancho para Columna 8
    "w-32", // Ancho para Columna 9
    "w-32", // Ancho para Columna 10
    "w-64", // Ancho para Columna 11
    "w-44", // Ancho para Columna 12
  ];

  const columnTitles = [
    "Cliente",
    "Tarea",
    "Fecha inicio",
    "Fecha estimada ",
    "Estado",
    "Comentarios",
    "Proceso",
    "Actividad",
    "Hora estimada",
    "Hora real",
    "Documentos asociados",
    "Fecha fin",
    "",
  ];
  const [newTaskAdd, setNewTaskAdd] = useState(false);
  async function addTask() {
    const nuevaTarea = newTaskEmpty.map((task, index) =>
      index === newTaskEmpty.length - 1 ? null : { ...task }
    );
    await setTasks((prev) => [nuevaTarea, ...prev]);
    setNewTaskAdd(true);
  }

  return (
    <div className="flex flex-col" onClick={() => setOpenNotifications(false)}>
      <div className="w-full flex justify-between z-[2]">
        <div className="flex items-end tab">
          <div className="flex items-end">
            <Tabs
              tabs={tabs}
              activeTab={activeTab}
              handleTabClick={handleTabClick}
            />
          </div>
          {activeTab === 1 && (
            <div className="flex gap-2 items-center ml-5 h-full ">
              <p className="font-base font-semibold">
                Total horas programadas:
              </p>
              <span className="py-1 px-4 rounded-lg text-white font-base bg-primary-green-500 ">
                {totalTimes} horas
              </span>
            </div>
          )}
        </div>
        {activeTab === 1 ? (
          <div className="flex gap-3 items-center mb-2">
            <Select
              options={clients}
              onSelect={handleSelect}
              initialOption={initialOptionSelect}
              readOnly={false}
              editStatus={true}
            />
            <ButtonWithIcon
              buttonColor={"bg-primary-red-600"}
              text={"AÃ±adir actividad"}
              icon={<CirclePlus />}
              action={() => addTask()}
            />
          </div>
        ) : (
          <div className="flex gap-3 items-center mb-2">
            <Select
              options={clients}
              onSelect={handleSelect}
              initialOption={initialOptionSelect}
              readOnly={false}
              editStatus={true}
            />
            <Select
              options={activities}
              onSelect={handleSelectActivity}
              initialOption={initialOptionSelectActivity}
              readOnly={false}
              editStatus={true}
            />
            <Select
              options={processes}
              onSelect={handleSelectProcess}
              initialOption={initialOptionSelectProcess}
              readOnly={false}
              editStatus={true}
            />
            <InputDate text={"Fecha inicio"} />
            <InputDate text={"Fecha fin"} />
          </div>
        )}
      </div>

      <div className="bg-white rounded-bl-md rounded-r-md overflow-auto h-[660px] px-4">
        {activeTab === 1 && (
          <div className="overflow-x-auto h-full">
            <div className="min-w-max">
              <table className="min-w-full">
                <thead>
                  <ColumnTable
                    columnTitlesActivity={columnTitles}
                    columnWidths={columnWidths}
                    readOnly={false}
                  />
                </thead>
                <tbody className="">
                  {tasks.map((item, index) => (
                    <RowTable
                      key={index}
                      index={index}
                      listItems={item}
                      columnWidths={columnWidths}
                      stateRow={stateRow}
                      handleChange={handleChange}
                      editStatus={true}
                      newTaskAdd={newTaskAdd}
                      setNewTaskAdd={setNewTaskAdd}
                      setRealTime={setRealTime}
                    />
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {activeTab === 2 && (
          <div className="overflow-x-auto h-full">
            <div className="min-w-max">
              <table className="min-w-full">
                <thead>
                  <ColumnTable
                    columnTitlesActivity={columnTitles}
                    columnWidths={columnWidths}
                    readOnly={true}
                  />
                </thead>
                <tbody className="">
                  {tasks.map((item, index) => (
                    <RowTable
                      key={index}
                      listItems={item}
                      columnWidths={columnWidths}
                      stateRow={stateRow}
                      handleChange={handleChange}
                      readOnly={true}
                      newTaskAdd={newTaskAdd}
                    />
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
      {activeTab === 2 && totalPages.length > 1 && (
        <div className="flex justify-end">
          <Pagination setTasks={setTasks} totalPages={totalPages} />
        </div>
      )}
    </div>
  );
};

export default WorkerPlanning;
